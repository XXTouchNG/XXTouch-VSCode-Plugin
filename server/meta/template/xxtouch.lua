-- This file is generated by generate-vscode-hints.py

--------------------------------------------------------------------------------
-- 模拟加速计模块
--------------------------------------------------------------------------------

---@class accelerometer*
accelerometer = {}

--- 模拟摇一摇
function accelerometer.shake() end

--- 重力方向向上
function accelerometer.rotate_home_on_top() end

--- 重力方向向左
function accelerometer.rotate_home_on_left() end

--- 重力方向向下
function accelerometer.rotate_home_on_bottom() end

--- 重力方向向右
function accelerometer.rotate_home_on_right() end


--------------------------------------------------------------------------------
-- 弹窗自动化模块
--------------------------------------------------------------------------------

---@class alert*
alert = {}

--- 打开弹窗日志
function alert.enable_logging() end

--- 关闭弹窗日志
function alert.disable_logging() end

--- 打开弹窗自动绕过
function alert.enable_autopass() end

--- 关闭弹窗自动绕过
function alert.disable_autopass() end

--- 设置弹窗自动绕过延迟
---@param delayInMs integer 延迟毫秒
function alert.set_autopass_delay(delayInMs) end

--- 获取最前方的弹窗
---@return table? 弹窗信息表
function alert.get_topmost() end

--- 消除最前方的弹窗
---@param btnID string|integer 按钮名称或按钮索引
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function alert.dismiss_topmost(btnID) end

--- 获取 App 弹窗规则
---@param appID string 标识符
---@return table? 弹窗规则表
function alert.get_local_rules(appID) end

--- 设置 App 弹窗规则
---@param appID string 标识符
---@param rules? table 弹窗规则表
function alert.set_local_rules(appID, rules) end

--- 清除 App 弹窗规则
---@param appID string 标识符
function alert.clear_local_rules(appID) end

--- 获取全局弹窗规则
---@return table? 弹窗规则表
function alert.get_global_rules() end

--- 设置全局弹窗规则
---@param rules table 弹窗规则表
function alert.set_global_rules(rules) end

--- 清除全局弹窗规则
function alert.clear_global_rules() end


--------------------------------------------------------------------------------
-- 应用程序模块
--------------------------------------------------------------------------------

---@class app*
app = {}

--- 获取 App 的捆绑包路径
---@param appID string 标识符
---@return string? 捆绑包路径
function app.bundle_path(appID) end

--- 获取 App 的捆绑包版本
---@param appID string 标识符
---@return string? 捆绑包版本
function app.bundle_version(appID) end

--- 获取 App 的捆绑包信息表
---@param appID string 标识符
---@return table? 捆绑包信息表
function app.bundle_info(appID) end

--- 获取 App 的数据容器路径
---@param appID string 标识符
---@return string? 数据容器路径
function app.data_path(appID) end

--- 获取 App 的分组信息
---@param appID string 标识符
---@return table 分组信息
function app.group_info(appID) end

--- 获取 App 的插件信息
---@param appID string 标识符
---@return table 插件信息
function app.plugin_info(appID) end

--- 弹出一个 App 通知
---@param appID string 标识符
---@param title string 通知标题
---@param content string 通知内容
function app.pop_banner(appID, title, content) end

--- 运行 App
---@param appID string 标识符
---@return integer 运行状态
function app.run(appID) end

--- 关闭 App
---@param appID string|integer 标识符或进程号
---@return integer 关闭状态
function app.close(appID) end

--- 模拟使用上划退出 App
---@param appID string 标识符
function app.quit(appID) end

--- 检测 App 是否正在运行
---@param appID string 标识符
---@return boolean 运行状态
function app.is_running(appID) end

--- 获取 App 的本地化名字
---@param appID string 标识符
---@return string? 本地化名字
function app.localized_name(appID) end

--- 获取 App 的图标数据
---@param appID string 标识符
---@return string? PNG图片数据
function app.png_data_for_bid(appID) end

--- 获取正在运行 App 的进程号
---@param appID string 标识符
---@return integer 进程号
function app.pid_for_bid(appID) end

--- 获取 App 当前内存消耗
---@param appID string|integer 标识符或进程号
---@return number 内存占用
function app.used_memory(appID) end

--- 获取前台 App 的标识符
---@return string? 标识符
function app.front_bid() end

--- 获取前台 App 的进程号
---@return integer 进程号
function app.front_pid() end

--- 前台打开一个 URL
---@param URL string URL
function app.open_url(URL) end

--- 获取 App 标识符列表
---@return table 标识符数组
function app.bundles() end

--- 获取进程列表
---@return table 进程列表
function app.all_procs() end

--- 安装 IPA
---@param ipaPath string 文件路径
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function app.install(ipaPath) end

--- 卸载一个 App
---@param appID string 标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function app.uninstall(appID) end

--- 向前台 App 中输入文字
---@param text string 文本内容
function app.input_text(text) end

--- 获取前台 App 中的相机图像
---@return string? image 图片
---@return string? failureReason 失败原因
function app.get_camera_image() end

--- 替换前台 App 中的相机图像
---@param imgData? string 图片
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function app.set_camera_image(imgData) end

--- 同步执行
---@param jsContent string JS代码
---@param appID? integer|string 进程号或标识符
---@param timeout? number 超时时间
---@return boolean operationSucceed 执行结果
---@return string? failureReason 失败原因
function app.eval(jsContent, appID, timeout) end


--------------------------------------------------------------------------------
-- App Store 助手
--------------------------------------------------------------------------------

---@class appstore*
appstore = {}

--- 获取 App Store 已登录用户信息
---@return table? 用户信息表 { name = 用户名, active = 是否活跃 }
function appstore.account() end

--- 模拟登录、注销 App Store
---@param username string 用户名
---@param password string 密码
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function appstore.login(username, password) end

--- 注销
function appstore.logout() end


--------------------------------------------------------------------------------
-- OTP 认证助手
--------------------------------------------------------------------------------

---@class auth*
auth = {}

--- 生成基于时间的一次性密码
---@param timestamp integer UNIX时间戳
---@param URL string 二维码URL
---@param secret? string 密钥
---@return string 一次性密码
function auth.totp_next(timestamp, URL, secret) end

--- 生成基于 HMAC 的一次性密码
---@param URL string 二维码URL
---@param secret? string 密钥
---@return string 一次性密码
function auth.hotp_next(URL, secret) end

--- 生成基于 HMAC 的一次性密码
---@param counter integer 计数器
---@param URL string 二维码URL
---@param secret? string 密钥
---@return string 一次性密码
function auth.hotp_counter(counter, URL, secret) end


--------------------------------------------------------------------------------
-- 清理模块
--------------------------------------------------------------------------------

---@class clear*
clear = {}

--- 清理某个或某组钥匙串信息
---@param domain string 反向域名
function clear.keychain(domain) end

--- 清理所有 App 的钥匙串信息
function clear.all_keychain() end

--- 清理剪贴板
function clear.pasteboard() end

--- 清理浏览器 Cookies
function clear.cookies() end

--- 清理系统缓存
function clear.caches() end

--- 清除相册中所有本地照片
function clear.all_photos() end

--- 清理某个应用的存档数据
---@param appID string 标识符
---@return boolean 操作成败
function clear.app_data(appID) end

--- 清理 IDFA/V
---@param newIDFA? string 新IDFA
---@param newIDFAs? table 新IDFAV表
---@return boolean operationSucceed 操作成败
---@return table? oldTab 旧IDFAV表
function clear.idfav(newIDFA, newIDFAVs) end


--------------------------------------------------------------------------------
-- 小饼干模块
--------------------------------------------------------------------------------

---@class cookies*
cookies = {}

--- 列出所有的小饼干
---@param appID string 标识符
---@return table? cookies 小饼干列表
---@return string? failureReason 失败原因
function cookies.list(appID) end

--- 搜索小饼干
---@param path string 路径
---@param domain? string 域名
---@param appID? string 标识符
---@return table? cookies 小饼干列表
---@return string? failureReason 失败原因
function cookies.filter(path, domain, appID) end

--- 获取小饼干
---@param name string 名称
---@param path? string 路径
---@param domain? string 域名
---@param appID? string 标识符
---@return table? cookies 小饼干
---@return string? failureReason 失败原因
function cookies.get(name, path, domain, appID) end

--- 获取小饼干的值
---@param name string 名称
---@param path? string 路径
---@param domain? string 域名
---@param appID? string 标识符
---@return any? value 值
---@return string? failureReason 失败原因
function cookies.value(name, path, domain, appID) end

--- 更新小饼干
---@param cookies table 小饼干列表
---@param appID? string 标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function cookies.update(cookies, appID) end

--- 替换所有的小饼干
---@param cookies table 小饼干列表
---@param appID? string 标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function cookies.replace(cookies, appID) end

--- 删除小饼干
---@param name string 名称
---@param path? string 路径
---@param domain? string 域名
---@param appID? string 标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function cookies.remove(name, path, domain, appID) end

--- 清空所有的小饼干
---@param appID string 标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function cookies.clear(appID) end


--------------------------------------------------------------------------------
-- 设备模块
--------------------------------------------------------------------------------

---@class device*
device = {}

--- 重置自动锁屏倒计时
function device.reset_idle() end

--- 锁定屏幕
function device.lock_screen() end

--- 解锁屏幕
---@param password? string 锁屏密码
function device.unlock_screen(锁屏密码) end

--- 获取屏幕锁定状态
---@return boolean 是否锁屏
function device.is_screen_locked() end

--- 获取前台应用的画面方向
---@return integer 旋转状态
function device.front_orien() end

--- 锁定屏幕旋转
function device.lock_orien() end

--- 解锁屏幕旋转
function device.unlock_orien() end

--- 获取屏幕旋转锁定状态
---@return boolean 是否锁定
function device.is_orien_locked() end

--- 振动设备
function device.vibrator() end

--- 后台播放声音
---@param soundPath string 声音文件路径
---@param isAsync? boolean 是否异步播放
function device.play_sound(soundPath, isAsync) end

--- 获取设备类型
---@return string 设备类型
function device.type() end

--- 获取设备名
---@return string 设备名
function device.name() end

--- 设置设备名
---@param name string 设备名
function device.set_name(name) end

--- 获取设备UDID
---@return string UDID
function device.udid() end

--- 获取设备的序列号
---@return string 序列号
function device.serial_number() end

--- 获取设备的 Wi-Fi MAC 地址
---@return string 歪坏麦克
function device.wifi_mac() end

--- 获取设备的蓝牙 MAC 地址
---@return string 布鲁提麦克
function device.bluetooth_mac() end

--- 获取设备所有的接口 IP
---@return table 接口信息数组
function device.ifaddrs() end

--- 获取当前设备电池剩余电量
---@return number 电量
function device.battery_level() end

--- 获取当前设备充电状态
---@return string 充电状态
function device.battery_state() end

--- 打开 Wi-Fi
function device.turn_on_wifi() end

--- 关闭 Wi-Fi
function device.turn_off_wifi() end

--- 获取 Wi-Fi 开关状态
---@return boolean 开关状态
function device.is_wifi_on() end

--- 打开蜂窝数据
function device.turn_on_data() end

--- 关闭蜂窝数据
function device.turn_off_data() end

--- 获取蜂窝数据开关状态
---@return boolean 开关状态
function device.is_data_on() end

--- 打开蓝牙
function device.turn_on_bluetooth() end

--- 关闭蓝牙
function device.turn_off_bluetooth() end

--- 获取蓝牙开关状态
---@return boolean 开关状态
function device.is_bluetooth_on() end

--- 打开飞行模式
function device.turn_on_airplane() end

--- 关闭飞行模式
function device.turn_off_airplane() end

--- 获取飞行模式开关状态
---@return boolean 开关状态
function device.is_airplane_on() end

--- 连接当前所选 VPN
function device.turn_on_vpn() end

--- 断开当前已连接的 VPN
function device.turn_off_vpn() end

--- 获取 VPN 开关状态
---@return boolean 开关状态
function device.is_vpn_on() end

--- 打开闪光灯
---@return boolean 操作成败
function device.flash_on() end

--- 关闭闪光灯
---@return boolean 操作成败
function device.flash_off() end

--- 获取闪光灯开关状态
---@return boolean 是否开启
function device.is_flash_on() end

--- 获取背光亮度
---@return number 亮度
function device.brightness() end

--- 设置背光亮度
---@param brightness number 亮度
function device.set_brightness(brightness) end

--- 获取自动锁屏分钟数
---@return number 分钟数
function device.autolock_time() end

--- 设置自动锁屏分钟数
---@param minutes number 分钟数
function device.set_autolock_time(minutes) end

--- 设置设备音量
---@param volume number 音量
function device.set_volume(volume) end

--- 获取设备静音状态
---@return boolean 是否静音
function device.is_mute_on() end

--- 开启设备静音
function device.mute_on() end

--- 关闭设备静音
function device.mute_off() end

--- 扫描无线接入点
---@return table 接入点列表
function device.scan_wifi() end

--- 加入到一个无线接入点
---@param SSID string SSID
---@param password? string 密码
---@param secType? string 安全类型
---@param timeout? number 超时时间
---@return boolean 操作成败
function device.join_wifi(SSID, password, secType, timeout) end

--- 退出无线接入点
---@param shouldForget? boolean 是否遗忘
function device.leave_wifi(shouldForget) end

--- 遗忘无线接入点
---@param SSID string SSID
function device.forget_wifi(SSID) end


--------------------------------------------------------------------------------
-- 对话框模块
--------------------------------------------------------------------------------

---@class dialog*
dialog = {}

---@class Dialog*
Dialog = {}

--- 建立一个对话框
---@param configName? string 配置分区
---@return Dialog* 对话框
function dialog(configName) end

--- 获取对话框配置分区
Dialog.defaults = ""

--- 设置对话框配置分区
---@param configName? string 配置分区
---@return Dialog* 对话框
function Dialog:set_config(configName) end

--- 配置对话框自动消失时间
---@param timeout number 超时秒
---@param shouldSubmit? boolean 是否提交
---@return Dialog* 对话框
function Dialog:set_timeout(timeout, shouldSubmit) end

--- 配置对话框的标题
---@param title string 标题文本
---@return Dialog* 对话框
function Dialog:set_title(title) end

--- 给对话框加上一个分组
---@param groupName string 分组名称
---@return Dialog* 对话框
function Dialog:add_group(groupName) end

--- 给对话框加上一个标签
---@param labelText string 标签文本
---@param alignment? string 对齐方式
---@return Dialog* 对话框
function Dialog:add_label(labelText, alignment) end

--- 给对话框加上一个文本框
---@param labelText string 标题
---@param placeholder? string 占位符
---@return Dialog* 对话框
function Dialog:add_input(labelText, placeholder) end

--- 给对话框加上一个开关
---@param labelText string 开关标题
---@param defaultValue? boolean 默认值
---@return Dialog* 对话框
function Dialog:add_switch(labelText, defaultValue) end

--- 给对话框加上一个滑块
---@param labelText string 滑块标题
---@param opts table 选项表 {最小值, 最大值, 步长}
---@param defaultValue? number 默认值
---@return Dialog* 对话框
function Dialog:add_range(labelText, opts, defaultValue) end

--- 给对话框加上一个单项选择器
---@param labelText string 标题
---@param optionList table 选项列表
---@param defaultValue? string 默认值
---@return Dialog* 对话框
function Dialog:add_picker(labelText, optionList, defaultValue) end

--- 给对话框加上一个多项选择器
---@param labelText string 标题
---@param optionList table 选项列表
---@param defaultList? table 默认值列表
---@return Dialog* 对话框
function Dialog:add_multiple_picker(labelText, optionList, defaultList) end

--- 给对话框加上一个有序选择器
---@param labelText string 标题
---@param optionList table 选项列表
---@param defaultList? table 默认值列表
---@return Dialog* 对话框
function Dialog:add_ordered_picker(labelText, optionList, defaultList) end

--- 给对话框加上一个单选组
---@param labelText string 标题
---@param optionList table 选项列表
---@param defaultValue? string 默认值
---@return Dialog* 对话框
function Dialog:add_radio(labelText, optionList, defaultValue) end

--- 给对话框加上一个多选组
---@param labelText string 标题
---@param optionList table 选项列表
---@param defaultList? table 默认值列表
---@return Dialog* 对话框
function Dialog:add_checkbox(labelText, optionList, defaultList) end

--- 给对话框加上一个数值调节器
---@param labelText string 标题
---@param opts table 选项表 {最小值, 最大值, 步长}
---@param defaultValue? number 默认值
---@return Dialog* 对话框
function Dialog:add_stepper(labelText, opts, defaultValue) end

--- 给对话框加上一个日期时间选择器
---@param labelText string 标题
---@param mode string 选择器模式
---@param format? string 格式化文本
---@return Dialog* 对话框
function Dialog:add_datetime(labelText, mode, format) end

--- 给对话框加上一个多行文本域
---@param labelText string 标题
---@return Dialog* 对话框
function Dialog:add_textarea(labelText) end

--- 给对话框加上一个键值对显示
---@param labelText string 标题
---@param value any 值
---@return Dialog* 对话框
function Dialog:add_value(labelText, value) end

--- 给对话框加上一张图片
---@param image Image* 图片
---@return Dialog* 对话框
function Dialog:add_image(image) end

--- 触发回调函数
---@param labelText string 标题
---@param callbackFunc? function 回调函数
---@return Dialog* 对话框
function Dialog:add_button(labelText, callbackFunc) end

--- 链接到子对话框
---@param childDiag Dialog* 子对话框
---@return Dialog* 对话框
function Dialog:add_link(childDiag) end

--- 将对话框弹出来并返回用户的选择
---@return boolean didSubmit 是否提交
---@return table optionTab 选项关联表
function Dialog:show() end

--- 在不弹出对话框的情况下获得对话框配置
---@return boolean didSubmit 是否提交
---@return table optionTab 选项关联表
function Dialog:load() end

--- 展示一个配置界面
---@param diag Dialog* 配置界面
function dialog.show(diag) end

--- 收起正在展示的配置界面
function dialog.dismiss() end

--- 校验一个配置界面
---@param diag Dialog* 配置界面
---@param shouldSave boolean 是否保存配置
function dialog.setup(diag, shouldSave) end

--- 重载正在展示的配置界面
---@param diag Dialog* 重载配置表
function dialog.reload(diag) end

--- 获取配置界面的配置值
---@param configName string 配置分区
---@param keyName string 键
---@return any? 值
function dialog.get(configName, keyName) end

--- 设置配置界面上的某个控件的值
---@param configName string 配置分区
---@param keyName string 键
---@param value any? 值
function dialog.set(configName, keyName, value) end

--- 读取某个配置分区所有配置
---@param configName string 配置分区
---@return table? 配置表
function dialog.read(configName) end

--- 覆盖写入配置表到某个配置分区
---@param configName string 配置分区
---@param configTab table 配置表
---@return boolean 操作成败
function dialog.write(configName, configTab) end

--- 清除某个配置分区所有的配置
---@param configName string 配置分区
---@return boolean 操作成败
function dialog.clear(configName) end


--------------------------------------------------------------------------------
-- 网络配置模块
--------------------------------------------------------------------------------

---@class ethconf*
ethconf = {}

--- 获取当前网络接口列表
---@return table 接口列表
function ethconf.interfaces() end

--- 获取、设置指定网络接口配置
---@param inName string 接口名称
---@return table? 配置表
function ethconf.get_config(inName) end

--- 获取、设置指定网络接口配置
---@param inName string 接口名称
---@param inTab table 配置表
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function ethconf.set_config(inName, inTab) end


--------------------------------------------------------------------------------
-- 扩展字符串模块
--------------------------------------------------------------------------------

---@class string*
string = {}

--- 转成十六进制文本
---@param data string 数据内容
---@return string 十六进制文本
function string.to_hex(data) end

--- 从十六进制文本转回
---@param hexStr string 十六进制文本
---@return string 数据内容
function string.from_hex(hexStr) end

--- 将 GBK 编码的文本转成 UTF-8 编码的文本
---@param encStr string GBK编码的字符串
---@return string? 可以直接用的文本
function string.from_gbk(encStr) end

--- 计算 MD5
---@param data string 数据内容
---@return string 哈希值
function string.md5(data) end

--- 计算 SHA-1
---@param data string 数据内容
---@return string 哈希值
function string.sha1(data) end

--- 计算 SHA-256
---@param data string 数据内容
---@return string 哈希值
function string.sha256(data) end

--- 计算 SHA-512
---@param data string 数据内容
---@return string 哈希值
function string.sha512(data) end

--- 编码
---@param data string 数据内容
---@return string b64文本
function string.base64_encode(data) end

--- 解码
---@param encStr string b64文本
---@return string 数据内容
function string.base64_decode(encStr) end

--- 加密
---@param data string 数据内容
---@param secret string 密钥
---@return string 加密后的数据
function string.aes128_encrypt(data, secret) end

--- 解密
---@param encData string 加密后的数据
---@param secret string 密钥
---@return string 数据内容
function string.aes128_decrypt(encData, secret) end

--- 用分隔符规则分割一个文本
---@param haystack string 待分割文本
---@param sep string 分隔符
---@param maxCnt? integer 最大返回个数
---@return table 分割好的文本数组
function string.split(haystack, sep, maxCnt) end

--- 去除文本左边的空白字符
---@param text string 处理前文本
---@return string 处理后文本
function string.ltrim(text) end

--- 去除文本右边的空白字符
---@param text string 处理前文本
---@return string 处理后文本
function string.rtrim(text) end

--- 去除文本两边的空白字符
---@param text string 处理前文本
---@return string 处理后文本
function string.trim(text) end

--- 去除文本中所有的空白字符
---@param text string 处理前文本
---@return string 处理后文本
function string.atrim(text) end

--- 左补齐
---@param text string 处理前文本
---@param padLen integer 补齐长度
---@param padText? string 补齐文本
---@return string 处理后文本
function string.lpad(text, padLen, padText) end

--- 右补齐
---@param text string 处理前文本
---@param padLen integer 补齐长度
---@param padText? string 补齐文本
---@return string 处理后文本
function string.rpad(text, padLen, padText) end

--- 去除掉文本前的 UTF8-BOM
---@param text string 处理前文本
---@return string 处理后文本
function string.strip_utf8_bom(text) end

--- 生成随机文本
---@param charPool string 字符池
---@param charCnt integer 生成字符个数
---@return string 随机文本
function string.random(charPool, charCnt) end

--- 字典序比较
---@param strA string 文本1
---@param strB string 文本2
---@param caseSensitive? boolean 是否区分大小写
---@return integer 比较结果
function string.compare(strA, strB, caseSensitive) end

--- 以操作系统、语言环境设定的标准排序规则进行比较
---@param strA string 文本1
---@param strB string 文本2
---@return integer 比较结果
function string.localized_compare(strA, strB) end

--- 比较两个版本号大小
---@param verA string 版本号1
---@param verB string 版本号2
---@return integer 比较结果
function string.compare_version(verA, verB) end

--- 编码整个 URL/URI
---@param text string 待编码文本
---@return string 编码结果文本
function string.encode_uri(text) end

--- 编码 URL/URI 的参数等组成部分
---@param text string 待编码文本
---@return string 编码结果文本
function string.encode_uri_component(text) end

--- URL 解码
---@param text string 待解码文本
---@return string 解码后的文本
function string.decode_uri(text) end

--- 半角转全角
---@param text string 半角文本
---@return string 全角文本
function string.to_fullwidth(text) end

--- 全角转半角
---@param text string 全角文本
---@return string 半角文本
function string.to_halfwidth(text) end

--- 首字母大写
---@param text string 文本
---@return string 首字母大写的文本
function string.to_capitalized(text) end

--- 转拼音文本
---@param text string 文本
---@param removeAccent? boolean 是否移除声调
---@return string 拼音文本
function string.to_pinyin(text, removeAccent) end

--- 是否为数值形式
---@param text string 文本
---@return boolean 判断结果
function string.is_number(text) end

--- 是否为整数形式
---@param text string 文本
---@return boolean 判断结果
function string.is_integer(text) end

--- 是否为电子邮箱地址
---@param text string 文本
---@return boolean 判断结果
function string.is_email(text) end

--- 是否为链接地址
---@param text string 文本
---@return boolean 判断结果
function string.is_link(text) end

--- 是否全为字母
---@param text string 文本
---@return boolean 判断结果
function string.is_letter(text) end

--- 是否全为大写字母
---@param text string 文本
---@return boolean 判断结果
function string.is_upper(text) end

--- 是否全为小写字母
---@param text string 文本
---@return boolean 判断结果
function string.is_lower(text) end

--- 是否全为数字
---@param text string 文本
---@return boolean 判断结果
function string.is_numeric(text) end

--- 是否全为字母或数字
---@param text string 文本
---@return boolean 判断结果
function string.is_alphanumeric(text) end

--- 是否为中文
---@param text string 文本
---@return boolean 判断结果
function string.is_chinese(text) end


--------------------------------------------------------------------------------
-- 扩展表模块
--------------------------------------------------------------------------------

---@class table*
table = {}

--- 深拷贝一个表
---@param inTab table 传入表
---@return table 传入表的副本
function table.deep_copy(inTab) end

--- 输出到标准输出
---@param inTab table 关联表
---@return string 表文本
function table.deep_print(inTab) end

--- 不输出到标准输出，仅返回字符串
---@param inTab table 关联表
---@return string 表文本
function stringify(inTab) end

--- 从字符串加载一个表
---@param tabStr string 表文本
---@return table? 关联表
function table.load_string(tabStr) end


--------------------------------------------------------------------------------
-- 文件操作模块
--------------------------------------------------------------------------------

---@class file*
file = {}

--- 判断文件或目录是否存在
---@param path string 文件或目录路径
---@return boolean 存在信息
function file.exists(path) end

--- 列出目录内所有文件名
---@param path string 目录路径
---@return table? 文件列表
function file.list(path) end

--- 获得文件的尺寸
---@param path string 文件路径
---@return integer 文件尺寸
function file.size(path) end

--- 读取文件中的数据
---@param path string 文件路径
---@return string? 文件内容
function file.reads(path) end

--- 将数据写入到文件
---@param path string 文件路径
---@param content string 待写入内容
---@return boolean 操作成败
function file.writes(path, content) end

--- 将数据追加到文件末尾
---@param path string 文件路径
---@param content string 待追加内容
---@return boolean 操作成败
function file.appends(path, content) end

--- 统计文本文件的总行数
---@param path string 文件路径
---@return integer 行数
function file.line_count(path) end

--- 获取文本文件指定行的内容
---@param path string 文件路径
---@param lineNum integer 行号
---@return string? 行内容
function file.get_line(path, lineNum) end

--- 设置文本文件指定行的内容
---@param path string 文件路径
---@param lineNum integer 行号
---@param content string 待写入内容
---@return boolean 操作成败
function file.set_line(path, lineNum, content) end

--- 在文本文件指定行前插入内容
---@param path string 文件路径
---@param lineNum integer 行号
---@param content string 待插入的内容
---@return boolean 操作成败
function file.insert_line(path, lineNum, content) end

--- 移除文本文件指定行
---@param path string 文件路径
---@param lineNum integer 行号
---@return boolean operationSucceed 操作成败
---@return string? deletedLine 被删除行的内容
function file.remove_line(path, lineNum) end

--- 获取一个文本文件的所有行
---@param path string 文件路径
---@return table 行数组
function file.get_lines(path) end

--- 将一个顺序表转换逐行覆盖写入到文件中
---@param path string 文件路径
---@param lineArr table 行数组
---@return boolean 操作成败
function file.set_lines(path, lineArr) end

--- 将一个顺序表转换逐行插入到文件指定行前
---@param path string 文件路径
---@param lineNum integer 行号
---@param lineArr table 行数组
---@return boolean 操作成败
function file.insert_lines(path, lineNum, lineArr) end


--------------------------------------------------------------------------------
-- Frida 助手
--------------------------------------------------------------------------------

---@class eval*
eval = {}

--- 注入并同步执行 JavaScript 代码
---@param jsContent string JS代码
---@param appID integer|string 进程号或标识符
---@param timeout number 超时时间
---@return boolean operationSucceed 执行结果
---@return string? attachedData 附加数据
---@return string? failureReason 失败原因
function eval.js_sync(jsContent, appID, timeout) end

--- 注入并异步执行 JavaScript 代码
---@param jsContent string JS代码
---@param appID integer|string 进程号或标识符
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function eval.js_async(jsContent, appID) end

--- 注入并异步执行 Lua 代码
---@param luaContent string LUA代码
---@param vmName? string 虚拟机名称
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function eval.lua(luaContent, vmName) end


--------------------------------------------------------------------------------
-- FTP 模块
--------------------------------------------------------------------------------

---@class ftp*
ftp = {}

--- FTP 文件下载
---@param remoteURL string URL
---@param localPath string 本地文件路径
---@param timeout? integer 连接超时秒
---@param shouldContinue? boolean 断点续传模式
---@param blockCallback? function 分块回调函数
---@param bufSiz? integer 缓冲区尺寸
---@return boolean downloadSucceed 下载成败
---@return table downloadDetail 下载信息
function ftp.download(remoteURL, localPath, timeout, shouldContinue, blockCallback, bufSiz) end

--- FTP 文件上传
---@param localPath string 本地文件路径
---@param remoteURL string URL
---@param timeout? integer 连接超时秒
---@param shouldContinue? boolean 断点续传模式
---@param blockCallback? function 分块回调函数
---@param bufSiz? integer 缓冲区尺寸
---@return boolean uploadSucceed 上传成败
---@return table uploadDetail 上传信息
function ftp.upload(localPath, remoteURL, timeout, shouldContinue, blockCallback, bufSiz) end


--------------------------------------------------------------------------------
-- HTTP 模块
--------------------------------------------------------------------------------

---@class http*
http = {}

--- 发起 GET 请求
---@param remoteURL string URL
---@param timeout? integer 超时秒
---@param headers? table 请求头
---@return integer statusCode HTTP状态码
---@return string headerJSON 返回头JSON文本
---@return string bodyData 返回主体
function http.get(remoteURL, timeout, headers) end

--- 发起 POST 请求
---@param remoteURL string URL
---@param timeout? integer 超时秒
---@param headers? table 请求头
---@param body? string 请求主体
---@return integer statusCode HTTP状态码
---@return string headerJSON 返回头JSON文本
---@return string bodyData 返回主体
function http.post(remoteURL, timeout, headers, body) end

--- HTTP 文件下载
---@param remoteURL string URL
---@param localPath string 本地文件路径
---@param timeout? integer 连接超时秒
---@param shouldContinue? boolean 断点续传模式
---@param blockCallback? function 分块回调函数
---@param bufSize? integer 缓冲区尺寸
---@return boolean downloadSucceed 下载成败
---@return table downloadDetail 下载信息
function http.download(remoteURL, localPath, timeout, shouldContinue, blockCallback, bufSize) end

--- 发起 HEAD 请求
---@param remoteURL string URL
---@param timeout? integer 超时秒
---@param headers? table 请求头
---@return integer statusCode HTTP状态码
---@return string headerJSON 返回头JSON文本
function http.head(remoteURL, timeout, headers) end

--- 发起 DELETE 请求
---@param remoteURL string URL
---@param timeout? integer 超时秒
---@param headers? table 请求头
---@return integer statusCode HTTP状态码
---@return string headerJSON 返回头JSON文本
---@return string bodyData 返回主体
function http.delete(remoteURL, timeout, headers) end

--- 发起 PUT 请求
---@param remoteURL string URL
---@param timeout? integer 超时秒
---@param headers? table 请求头
---@param body? string 请求主体
---@return integer statusCode HTTP状态码
---@return string headerJSON 返回头JSON文本
---@return string bodyData 返回主体
function http.put(remoteURL, timeout, headers, body) end


--------------------------------------------------------------------------------
-- 图像模块
--------------------------------------------------------------------------------

---@class image*
image = {}

---@class Image*
Image = {}

--- 判断一个值是否为图片对象
---@param value any 需要判断的值
---@return boolean 是否为图片对象
function image.is(value) end

--- 创建指定尺寸空白图片对象
---@param width integer 宽
---@param height integer 高
---@return Image* 图像
function image.new(width, height) end

--- 新建一个文本图片对象
---@param text string 文本
---@param opts? table 选项表 {font = 字体, size = 字体大小, color = 字体颜色, alpha = 字体不透明度, back_color = 背景色, back_alpha = 背景不透明度}
function image.new_text_image(text, opts) end

--- 从文件创建图片对象
---@param imgPath string 文件路径
---@return Image* 图像
function image.load_file(imgPath) end

--- 从数据创建图片对象
---@param imgData string 图像数据
---@return Image* 图像
function image.load_data(imgData) end

--- 将文本编码成二维码图片
---@param text string 文本
---@param opts? table 选项表 {size = 尺寸, fill_color = 填充颜色, background_color = 背景颜色}
---@return Image* 图像
function image.qr_encode(text, opts) end

--- 图像拼接
---@param imageNameList table 图片文件名数组
---@param outputPath string 输出路径
---@param direction? integer 拼接方向
---@param quality? number 生成质量
---@return boolean 操作成败
function image.oper_merge(imageNameList, outputPath, direction, quality) end

--- 导入一个图片文件到相册
---@param imagePath string 图片文件路径
function image.image_to_album(imagePath) end

--- 导入一个视频文件到相册
---@param videoPath string 视频文件路径
function image.video_to_album(videoPath) end

--- 获取图片对象的尺寸
---@return integer width 宽
---@return integer height 高
function Image:size() end

--- 从图片对象创建拷贝图片对象
---@return Image* 图像2
function Image:copy() end

--- 截取部分区域新建图片对象
---@param left? integer 左
---@param top? integer 上
---@param right? integer 右
---@param bottom? integer 下
---@return Image* 图像2
function Image:crop(left, top, right, bottom) end

--- 销毁一个图片对象
function Image:destroy() end

--- 保存图片对象到相册
function Image:save_to_album() end

--- 输出图片对象到 PNG 文件或数据
---@param imagePath string 文件路径
function Image:save_to_png_file(imagePath) end

--- 输出图片对象到 PNG 文件或数据
---@return string PNG数据
function Image:png_data() end

--- 输出图片对象到 JPEG 文件或数据
---@param imagePath string 文件路径
---@param quality? number 图像质量
function Image:save_to_jpeg_file(imagePath, quality) end

--- 输出图片对象到 JPEG 文件或数据
---@param quality? number 图像质量
---@return string JPEG数据
function Image:jpeg_data(quality) end

--- 逆时针旋转 90 度 ⤴️
---@return Image* 图像
function Image:turn_left() end

--- 顺时针旋转 90 度 ⤵️
---@return Image* 图像
function Image:turn_right() end

--- 上下翻转
---@return Image* 图像
function Image:turn_upondown() end

--- 缩放图片对象
---@param newWidth integer 宽
---@param newHeight integer 高
---@return Image* 图像
function Image:resize(newWidth, newHeight) end

--- OpenCV 缩放图片对象
---@param newWidth integer 宽
---@param newHeight integer 高
---@return Image* 图像
function Image:cv_resize(newWidth, newHeight) end

--- 翻转图片对象
---@param newDirection integer 方向
---@return Image* 图像
function Image:flip(newDirection) end

--- OpenCV 翻转图片对象
---@param newDirection integer 方向
---@return Image* 图像
function Image:cv_flip(newDirection) end

--- 获取图片对象某点颜色
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@return integer color 颜色
---@return integer alpha 不透明度
function Image:get_color(coordX, coordY) end

--- 设置图片对象某点颜色
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@param color integer 颜色
---@return Image* 图像
function Image:set_color(coordX, coordY, color) end

--- 颜色替换
---@param origColor integer 原色
---@param replColor integer 替换色
---@param similarity integer 原色相似度
---@return Image* 图像
function Image:replace_color(origColor, replColor, similarity) end

--- 图中贴图
---@param smallImg Image* 小图像
---@param opts? table 选项表 {left = 左上横坐标, top = 左上纵坐标, alpha = 不透明度, background = {{颜色*, 色偏*}, {颜色*, 色偏*}, ...}}
function Image:draw_image(smallImg, opts) end

--- OpenCV 阈值法二值化
---@param threshold? integer 二值化阈值
---@return Image* 图像
function Image:cv_binarization(threshold) end

--- OpenCV 自适应二值化
---@param areaSize number 邻域大小
---@param constantC? number 常数C
---@param shouldGaussianBlur? boolean 是否高斯加权
---@return Image* 图像
function Image:cv_adaptive_binarization(areaSize, constantC, shouldGaussianBlur) end

--- 色偏法二值化
---@param opts? table 选项表 {{颜色*, 色偏*}, {颜色*, 色偏*}, ...}
---@return Image* 图像
function Image:binaryzation(opts) end

--- GPU 加速二值化
---@param ditherType integer 抖动算法类型
---@return Image* 图像
function Image:binarization(ditherType) end

--- 图片多点颜色匹配
---@param colors table 匹配表 {{横坐标*, 纵坐标*, 颜色*}, {横坐标*, 纵坐标*, 颜色*}, ...}
---@param similarity? integer 相似度
---@return boolean 是否完全匹配
function Image:is_colors(colors, similarity) end

--- 图中找色（多点相似度模式）
---@param opts table 匹配表 {[find_all = 是否搜索多个结果], [max_results = 最大结果数], [max_miss = 允许最多未命中数], {起始点横坐标, 起始点纵坐标, 起始点颜色[, 起始点相似度]}, {偏移点横坐标*, 偏移点纵坐标*, 偏移点颜色*[, 偏移点相似度*]}, {偏移点横坐标*, 偏移点纵坐标*, 偏移点颜色*[, 偏移点相似度*]}, ...}
---@param similarity? integer 全局相似度
---@param left? integer 搜索区域左上横坐标
---@param top? integer 搜索区域左上纵坐标
---@param right? integer 搜索区域右下横坐标
---@param bottom? integer 搜索区域右下纵坐标
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
function Image:find_color(opts, similarity, left, top, right, bottom) end

--- 图中找色（多点色偏模式）
---@param opts table 匹配表 {[find_all = 是否搜索多个结果], [max_results = 最大结果数], [max_miss = 允许最多未命中数], {起始点横坐标, 起始点纵坐标, {起始点颜色[, 起始点色偏]}}, {偏移点横坐标*, 偏移点纵坐标*, {偏移点颜色*, 偏移点色偏*}}, {偏移点横坐标*, 偏移点纵坐标*, {偏移点颜色*, 偏移点色偏*}}, ...}
---@param left? integer 搜索区域左上横坐标
---@param top? integer 搜索区域左上纵坐标
---@param right? integer 搜索区域右下横坐标
---@param bottom? integer 搜索区域右下纵坐标
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
function Image:find_color(opts, left, top, right, bottom) end

--- OpenCV 图中找图
---@param smallImg Image* 小图像
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
---@return integer similarity 结果相似度
function Image:find_image(smallImg) end

--- 图片光学字符识别
---@param level integer 识别等级
---@param timeout? integer 超时时间
---@return table resultList 结果文本列表
---@return table resultDetail 结果详情
function Image:ocr_text(level, timeout) end

--- Tesseract 图片光学字符识别
---@param opts? table 选项表 {[lang = 字库名称], [white_list = 白名单], [black_list = 黑名单], [left = 左], [top = 上], [right = 右], [bottom = 下]}
---@return string resultText 结果文本
---@return table resultDetail 结果详情
function Image:tess_ocr(opts) end

--- 图片二维码识别
---@param timeout? integer 超时时间
---@return string resultText 识别结果文本
---@return table resultDetail 结果详情表
function Image:qr_decode(timeout) end

--- 图片矩形检测
---@param maxCount? integer 最大结果数
---@param timeout? integer 超时时间
---@return table resultList 矩形位置表
---@return table resultDetail 结果详情表
function Image:detect_rectangles(maxCount, timeout) end


--------------------------------------------------------------------------------
-- JSON 模块
--------------------------------------------------------------------------------

---@class json*
json = {}

--- JSON 中的 NULL 常量
json.null = nil

--- 将 Lua 值转储为 JSON 文本
---@param value any 值
---@return string JSON文本
function json.encode(value) end

--- 将 JSON 文本加载为 Lua 值
---@param jsonStr string JSON文本
---@return any 值
function json.decode(jsonStr) end


--------------------------------------------------------------------------------
-- 模拟按键模块
--------------------------------------------------------------------------------

---@class key*
key = {}

--- 模拟按一下物理按键
---@param keyCode integer 按键码
function key.press(keyCode) end

--- 模拟按下物理按键
---@param keyCode integer 按键码
function key.down(keyCode) end

--- 松开按下的物理按键
---@param keyCode integer 按键码
function key.up(keyCode) end

--- 模拟键入文本
---@param text string 文本
---@param delay? integer 每键延迟
function key.send_text(text, delay) end


--------------------------------------------------------------------------------
-- 内存读写模块
--------------------------------------------------------------------------------

---@class memory*
memory = {}

--- 获取运行中 App 的进程号
---@param appId string 标识符
---@return integer 进程号
function memory.get_process_id(appId) end

--- 设置内存搜索范围
---@param searchMode integer 搜索范围
function memory.set_search_mode(searchMode) end

--- 搜索 App 内存
---@param procID integer 进程号
---@param newSearch boolean 是否开始新一轮搜索
---@param beginOffset integer 起始偏移地址
---@param searchOpts table 搜索条件表
---@param dataType string 全局搜索数据类型
---@param maxCnt? integer 最大返回结果数量
---@return table searchResult 搜索结果表
---@return string? failureReason 失败原因
function memory.search(procID, newSearch, beginOffset, searchOpts, dataType, maxCnt) end

--- 重置搜索结果
function memory.reset_search() end

--- 获取 App 内存基址
---@param procID integer 进程号
---@return integer 内存基址
function memory.get_base_address(procID) end

--- 读取 App 内存
---@param procID integer 进程号
---@param memoryAddr integer 内存地址
---@param dataType string 数据类型
---@return integer value 值
---@return string? failureReason 失败原因
function memory.read(procID, memoryAddr, dataType) end

--- 写入 App 内存
---@param procID integer 进程号
---@param memoryAddr integer 内存地址
---@param dataType string 数据类型
---@param value integer 要写入的数值
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function memory.write(procID, memoryAddr, dataType, value) end


--------------------------------------------------------------------------------
-- Web 自动化模块
--------------------------------------------------------------------------------

---@class monkey*
monkey = {}

--- 列出前台 App 的 Web 视图
---@return table detailTab 结果详情表 {responder = 响应者标识符, views = 视图列表 }
---@return string? failureReason 失败原因
function monkey.list_webviews() end

--- 搜索前台 App 的 Web 视图
---@param filterOpts table 选项表 {objectIdentifier = 视图对象标识符, responder = 响应者标识符, scheme = URL协议, host = URL主机, path = URL路径, absoluteString = 完整URL, url = URL匹配正则表达式}
---@return table? viewTab 视图信息表
---@return string? failureReason 失败原因
function monkey.get_webview(filterOpts) end

--- 获取指定 Web 视图的信息
---@param objectID string 视图对象标识符
---@return table? viewTab 视图信息表
---@return string? failureReason 失败原因
function monkey.get_webview_id(objectID) end

--- 搜索前台 App 的 Web 视图并执行 JavaScript
---@param filterOpts table 选项表 {objectIdentifier = 视图对象标识符, responder = 响应者标识符, scheme = URL协议, host = URL主机, path = URL路径, absoluteString = 完整URL, url = URL匹配正则表达式}
---@param jsContent string JavaScript 内容
---@return any resultValue 执行结果
---@return string? failureReason 失败原因
function monkey.eval(filterOpts, jsContent) end

--- 在指定 Web 视图中执行 JavaScript
---@param objectID string 视图对象标识符
---@param jsContent string JS代码
---@return any resultValue 执行结果
---@return string? failureReason 失败原因
function monkey.eval_id(objectID, jsContent) end

--- 获取最前方的表单控制器信息
---@return table? formTab 表单控制器信息
---@return string? failureReason 失败原因
function monkey.get_topmost_formcontrol() end

--- 设置最前方的表单控制器的值
---@param value any 值
---@param shouldAppend? boolean 是否追加选择
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function monkey.update_topmost_formcontrol(value, shouldAppend) end

--- 关闭最前方的表单控制器
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function monkey.dismiss_topmost_formcontrol() end

--- 搜索前台 App 的 Web 视图并模拟输入文本
---@param filterOpts table 选项表 {objectIdentifier = 视图对象标识符, responder = 响应者标识符, scheme = URL协议, host = URL主机, path = URL路径, absoluteString = 完整URL, url = URL匹配正则表达式}
---@param text string 待键入的文本
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function monkey.input(filterOpts, text) end

--- 在指定 Web 视图中模拟输入文本
---@param objectID string 视图对象标识符
---@param text string 待键入的文本
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function monkey.input_id(objectID, text) end

--- 添加预设用户脚本
---@param filterOpts table 选项表 {responder = 响应者标识符, scheme = URL协议, host = URL主机, path = URL路径, absoluteString = 完整URL, url = URL匹配正则表达式}
---@param jsContent string JS代码
---@param execAfterLoad? boolean 是否在加载完成后执行
---@param mainFrameOnly? boolean 是否仅在主帧框中执行
function monkey.add_userscript(filterOpts, jsContent, execAfterLoad, mainFrameOnly) end

--- 移除所有预设用户脚本
function monkey.clear_userscripts() end

--- 列出所有预设用户脚本
---@return table 预设用户脚本列表
function monkey.list_userscripts() end

--- 读取 JavaScript 消息
---@param filterOpts table 选项表 {responder = 响应者标识符, scheme = URL协议, host = URL主机, path = URL路径, absoluteString = 完整URL, url = URL匹配正则表达式}
---@param clearAll? boolean 是否清空所有消息
---@return table? msgList 消息列表
---@return string? failureReason 失败原因
function monkey.read_messages(filterOpts, clearAll) end

--- 清空 JavaScript 消息
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function monkey.clear_messages() end


--------------------------------------------------------------------------------
-- 剪贴板模块
--------------------------------------------------------------------------------

---@class pasteboard*
pasteboard = {}

--- 获取剪贴板中的数据
---@param utiType? string 通用类型标识
---@return string 数据
function pasteboard.read(utiType) end

--- 写内容进剪贴板
---@param data string 数据
---@param utiType? string 通用类型标识
function pasteboard.write(data, utiType) end


--------------------------------------------------------------------------------
-- 属性表模块
--------------------------------------------------------------------------------

---@class plist*
plist = {}

--- 读取属性表文件
---@param path string 文件路径
---@return table 表
function plist.read(path) end

--- 写入属性表文件
---@param path string 文件路径
---@param tab table 表
---@return boolean 操作成败
function plist.write(path, tab) end

--- 将属性表数据加载为 Lua 表
---@param data string 属性表数据
---@return table 表
function plist.load(data) end

--- 将 Lua 表转储为属性表数据
---@param tab table 表
---@param fmt string 数据格式
---@return string 属性表数据
function plist.dump(tab, fmt) end


--------------------------------------------------------------------------------
-- 进程字典模块
--------------------------------------------------------------------------------

---@class proc*
proc = {}

--- 进程字典
---@param key string 键
---@param val string 值
---@return string 原值
function proc.put(key, val) end

--- 存储值到进程字典
---@param key string 键
---@param val string 值
---@return string 原值
function proc.put(key, val) end

--- 查看进程字典存储的值
---@param key string 键
---@return string 值
function proc.get(key) end

--- 进程队列字典
---@param key string 键
---@param val string 值
---@return integer 队列尺寸
function proc.queue_push(key, val) end

--- 向进程队列字典中压入一个值
---@param key string 键
---@param val string 值
---@return integer 队列尺寸
function proc.queue_push(key, val) end

--- 从进程队列字典中弹出一个值
---@param key string 键
---@return string 值
function proc.queue_pop(key) end

--- 从进程队列字典中弹出所有值
---@param key string 键
---@return table 顺序表
function proc.queue_clear(key) end

--- 获取进程队列字典的尺寸
---@param key string 键
---@return integer 队列尺寸
function proc.queue_size(key) end


--------------------------------------------------------------------------------
-- 描述文件模块
--------------------------------------------------------------------------------

---@class profile*
profile = {}

--- 导入描述文件
---@param path string 描述文件路径
---@param shouldInstall? boolean 是否安装
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function profile.import(path, shouldInstall) end

--- 列出所有描述文件
---@return table 描述文件列表
function profile.list() end

--- 获取描述文件
---@param profileID string 描述文件ID
---@return table 描述文件
function profile.fetch(profileID) end

--- 移除描述文件
---@param profileID string 描述文件ID
function profile.remove(profileID) end

--- 清空所有的描述文件
function profile.clear() end


--------------------------------------------------------------------------------
-- SMB 模块
--------------------------------------------------------------------------------

---@class samba*
samba = {}

---@class Samba*
Samba = {}

--- Samba 客户端
---@param sharedFolder string 共享文件夹
---@param username string 用户名
---@param password string 密码
---@return Samba* 客户端
function samba.client(sharedFolder, username, password) end

--- 判断一个值是否为 SMB 客户端
---@param value any 需要判断的值
---@return boolean 是否为SMB客户端
function samba.is(value) end

--- 列出 SMB 服务器上的目录内容
---@param remoteURL string 远程URL
---@return table? itemList 目录内容
---@return string? failureReason 失败原因
function Samba:list(remoteURL) end

--- 在 SMB 服务器上创建目录
---@param remoteURL string 远程URL
---@return table? attrTab 目录属性表
---@return string? failureReason 失败原因
function Samba:mkdir(remoteURL) end

--- 在 SMB 服务器上创建空白文件
---@param remoteURL string 远程URL
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function Samba:touch(remoteURL) end

--- 在 SMB 服务器上删除文件或空目录
---@param remoteURL string 远程URL
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function Samba:remove(remoteURL) end

--- 在 SMB 服务器上递归删除目录
---@param remoteURL string 远程URL
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function Samba:rmdir(remoteURL) end

--- 在 SMB 服务器上重命名文件或目录
---@param oldURL string 原URL
---@param newURL string 新URL
---@return boolean operationSucceed 操作成败
---@return string? failureReason失败原因
function Samba:rename(oldURL, newURL) end

--- 从 SMB 服务器上下载文件或目录
---@param remoteURL string 远程URL
---@param localPath string 本地路径
---@param progressCallback? function 进度回调函数
---@return boolean operationSucceed 操作成败
---@return string? failureReason 失败原因
function Samba:download(remoteURL, localPath, progressCallback) end

--- 上传文件或目录到 SMB 服务器
---@param localPath string 本地路径
---@param remoteURL string 远程URL
---@param progressCallback? function 进度回调函数
---@return boolean operationSucceed 操作成败
---@return string? failureReason失败原因
function Samba:upload(localPath, remoteURL, progressCallback) end


--------------------------------------------------------------------------------
-- 屏幕模块
--------------------------------------------------------------------------------

---@class screen*
screen = {}

--- 初始化旋转坐标系
---@param coordinate integer 坐标系
---@return integer 原坐标系
function screen.init(coordinate) end

--- 初始化旋转坐标系（Home 在下）
---@return integer 原坐标系
function screen.init_home_on_bottom() end

--- 初始化旋转坐标系（Home 在右）
---@return integer 原坐标系
function screen.init_home_on_right() end

--- 初始化旋转坐标系（Home 在左）
---@return integer 原坐标系
function screen.init_home_on_left() end

--- 初始化旋转坐标系（Home 在上）
---@return integer 原坐标系
function screen.init_home_on_top() end

--- 获取旋转坐标系
---@return integer 坐标系
function screen.orientation() end

--- 坐标旋转转换
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@param direction integer 旋转方向
---@return integer newCoordX 旋转后的横坐标
---@return integer newCoordY 旋转后的纵坐标
function screen.rotate_xy(coordX, coordY, direction) end

--- 获取屏幕尺寸
---@return integer screenWidth 屏宽
---@return integer screenHeight 屏高
function screen.size() end

--- 保持屏幕
---@return integer 获取屏幕内容计数
function screen.keep() end

--- 退出屏幕保持状态
---@return integer 获取屏幕内容计数
function screen.unkeep() end

--- 获取屏幕上某点颜色
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@return integer 颜色值
function screen.get_color(coordX, coordY) end

--- 获取屏幕上某点颜色 RGB
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@return integer red 红
---@return integer green 绿
---@return integer blue 蓝
function screen.get_color_rgb(coordX, coordY) end

--- 屏幕多点颜色匹配
---@param colors table 颜色表 {{横坐标*, 纵坐标*, 颜色*}, {横坐标*, 纵坐标*, 颜色*}, ...}
---@param similarity? integer 相似度
---@return boolean 是否完全匹配
function screen.is_colors(colors, similarity) end

--- 多点相似度模式找色
---@param opts table 匹配表 {[find_all = 是否搜索多个结果], [max_results = 最大结果数], [max_miss = 允许最多未命中数], {起始点横坐标, 起始点纵坐标, 起始点颜色[, 起始点相似度]}, {偏移点横坐标*, 偏移点纵坐标*, 偏移点颜色*[, 偏移点相似度*]}, {偏移点横坐标*, 偏移点纵坐标*, 偏移点颜色*[, 偏移点相似度*]}, ...}
---@param similarity? integer 全局相似度
---@param left? integer 搜索区域左边界
---@param top? integer 搜索区域上边界
---@param right? integer 搜索区域右边界
---@param bottom? integer 搜索区域下边界
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
function screen.find_color(opts, similarity, left, top, right, bottom) end

--- 多点色偏模式找色
---@param opts table 匹配表 {[find_all = 是否搜索多个结果], [max_results = 最大结果数], [max_miss = 允许最多未命中数], {起始点横坐标, 起始点纵坐标, {起始点颜色[, 起始点色偏]}}, {偏移点横坐标*, 偏移点纵坐标*, {偏移点颜色*, 偏移点色偏*}}, {偏移点横坐标*, 偏移点纵坐标*, {偏移点颜色*, 偏移点色偏*}}, ...}
---@param left? integer 搜索区域左边界
---@param top? integer 搜索区域上边界
---@param right? integer 搜索区域右边界
---@param bottom? integer 搜索区域下边界
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
function screen.find_color(opts, left, top, right, bottom) end

--- 获取屏幕内容
---@param left? integer 左
---@param top? integer 上
---@param right? integer 右
---@param bottom? integer 下
---@return Image* 屏幕内容
function screen.image(left, top, right, bottom) end

--- 屏幕找图
---@param smallImg Image* 子图像
---@param similarity? integer 相似度
---@param left? integer 搜索区域左边界
---@param top? integer 搜索区域上边界
---@param right? integer 搜索区域右边界
---@param bottom? integer 搜索区域下边界
---@return integer coordX 横坐标
---@return integer coordY 纵坐标
---@return integer resultSimilarity 结果相似度
function screen.find_image(smallImg, similarity, left, top, right, bottom) end

--- 屏幕光学字符识别
---@param opts? table 选项表 {left = 左, top = 上, right = 右, bottom = 下, languages = 语言列表, words = 备选词列表, confidence = 最低置信度, level = 识别等级, timeout = 超时时间}
---@return table resultList 结果文本列表
---@return table resultDetail 结果详情表
function screen.ocr_text(opts) end

--- 屏幕光学字符识别
---@param level integer 识别等级
---@param timeout? integer 超时时间
---@return table resultList 结果文本列表
---@return table resultDetail 结果详情
function screen.ocr_text(level, timeout) end

--- Tesseract 屏幕光学字符识别
---@param opts? table 选项表 {[lang = 字库名称], [white_list = 白名单], [black_list = 黑名单], [left = 左], [top = 上], [right = 右], [bottom = 下]}
---@return string resultText 结果文本
---@return table resultDetail 结果详情表
function screen.tess_ocr(opts) end

--- 屏幕二维码识别
---@param timeout? integer 超时时间
---@return string resultText 识别结果文本
---@return table resultDetail 结果详情表
function screen.qr_decode(timeout) end

--- 屏幕矩形检测
---@param opts? table 选项表 {left = 左, top = 上, right = 右, bottom = 下, minRatio = 最小宽高比, maxRatio = 最大宽高比, minSize = 最小尺寸比, quadTolerance = 最大倾角, confidence = 最低置信度, maxCount = 最大结果数, timeout = 超时时间}
---@return table resultList 矩形位置表
---@return table resultDetail 结果详情表
function screen.detect_rectangles(opts) end

--- 屏幕矩形检测
---@param maxCount? integer 最大结果数
---@param timeout? integer 超时时间
---@return table resultList 矩形位置表
---@return table resultDetail 结果详情表
function screen.detect_rectangles(maxCount, timeout) end


--------------------------------------------------------------------------------
-- 系统模块
--------------------------------------------------------------------------------

---@class sys*
sys = {}

--- 显示提示文字
---@param text string 文字内容
---@param direction? integer 旋转方向
function sys.toast(text, direction) end

--- 弹出系统提示
---@param content string 文字内容
---@param autoDismissalInSeconds? integer 自动消失秒数
---@param title? string 标题
---@param btnA? string 按钮0标题
---@param btnB? string 按钮1标题
---@param btnC? string 按钮2标题
---@return integer 选择
function sys.alert(content, autoDismissalInSeconds, title, btnA, btnB, btnC) end

--- 弹出输入提示
---@param title string 标题
---@param message? string 描述内容
---@param shadowOpts? string|table 阴影提示内容或阴影提示表 {"文本框1阴影提示", "文本框2阴影提示"}
---@param defaultTexts? string|table 默认文本内容或默认文本表 {"文本框1默认文本", "文本框2默认文本"}
---@param btnA? string 按钮0标题
---@param btnB? string 按钮1标题
---@param btnC? string 按钮2标题
---@param autoDismissalInSeconds? integer 自动消失秒数
---@return string enteredTextA 输入的文本行A
---@return string? enteredTextB 输入的文本行B
---@return integer? selectedButtonIndex 选择的按钮索引
function sys.input_box(title, message, shadowOpts, defaultTexts, btnA, btnB, btnC, autoDismissalInSeconds) end

--- 弹出输入提示
---@param title string 标题
---@param message? string 描述内容
---@param shadowOpts? string|table 阴影提示内容或阴影提示表 {"文本框1阴影提示", "文本框2阴影提示"}
---@param defaultTexts? string|table 默认文本内容或默认文本表 {"文本框1默认文本", "文本框2默认文本"}
---@param autoDismissalInSeconds? integer 自动消失秒数
---@return string enteredTextA 输入的文本行A
---@return string? enteredTextB 输入的文本行B
function sys.input_box(title, message, shadowOpts, defaultTexts, autoDismissalInSeconds) end

--- 输入文字
---@param text string 文字内容
---@param shouldPressEnter? boolean 输入完成按回车
function sys.input_text(text, shouldPressEnter) end

--- 秒级延迟
---@param delayInSeconds integer 秒数
function sys.sleep(delayInSeconds) end

--- 毫秒级延迟
---@param delayInMilliseconds integer 毫秒数
function sys.msleep(delayInMilliseconds) end

--- 获取当前毫秒级时间戳
---@return integer 毫秒级UNIX时间戳
function sys.mtime() end

--- 获取网络时间
---@return integer timestamp 秒级UNIX时间戳
---@return boolean isSynchronized 是否已同步
function sys.net_time() end

--- 产生一个随机数
---@return integer 随机数字
function sys.rnd() end

--- 获取设备当前可用内存值
---@return number 可用内存
function sys.available_memory() end

--- 获取设备当前总内存值
---@return number 总内存
function sys.total_memory() end

--- 列出设备挂载点
---@return table 挂载点信息表
function sys.disks() end

--- 获取设备当前未使用的存储空间值
---@param mountPoint string 挂载点
---@return number 剩余空间
function sys.free_disk_space(mountPoint) end

--- 获取设备当前总存储空间值
---@param mountPoint string 挂载点
---@return number 总空间
function sys.total_disk_space(mountPoint) end

--- 输出标准系统日志
---@param argA any 参数1
---@param argB any 参数2
function sys.log(参数1, 参数2, ...) end

--- 问系统一个问题
---@param question string 问题名称
---@return string? 系统回复
function sys.mgcopyanswer(question) end

--- 获取系统版本
---@return string 系统版本
function sys.version() end

--- 获取 XXTouchNG 版本
---@return string 版本号
function sys.xtversion() end

--- 重启春板（妙手回春）
function sys.respring() end

--- 重启
function sys.reboot() end

--- 关机
function sys.halt() end

--- 用户态重启（软重启）
function sys.ldrestart() end

--- 获取语言
---@return string 语言代码
function sys.language() end

--- 设置语言
---@param langCode string 语言代码
function sys.set_language(langCode) end

--- 获取区域
---@return string 区域代码
function sys.locale() end

--- 设置区域
---@param regionCode string 区域代码
function sys.set_locale(regionCode) end

--- 获取时区
---@return string 时区代码
function sys.timezone() end

--- 设置时区
---@param tzCode string 时区代码
function sys.set_timezone(tzCode) end

--- 获取外观样式
---@return integer 外观样式
function sys.appearance() end

--- 设置外观样式
---@param appearance integer 外观样式
function sys.set_appearance(appearance) end

--- 获取文字大小
---@return integer 文字大小
function sys.textsize() end

--- 设置文字大小
---@param textSize integer 文字大小
function sys.set_textsize(文字大小) end

--- 获取粗体字开关状态
---@return boolean 是否开启
function sys.is_boldtext_on() end

--- 开启粗体字
function sys.boldtext_on() end

--- 关闭粗体字
function sys.boldtext_off() end

--- 获取放大模式开关状态
---@return boolean 是否开启
function sys.is_zoom_on() end

--- 开启放大模式
function sys.zoom_on() end

--- 关闭放大模式
function sys.zoom_off() end

--- 设置壁纸
---@param lightImagePath string 浅色图片路径
---@param darkImagePath? string 深色图片路径
---@param position? integer 生效位置
---@param useParallax? boolean 是否透视
function sys.set_wallpaper(lightImagePath, darkImagePath, position, useParallax) end

--- 获取图标布局
---@return table 图标布局表
function sys.icon_state() end

--- 设置图标布局
---@param layoutTab table 图标布局表
function sys.set_icon_state(layoutTab) end

--- 获取 Assistive Touch 开关状态
---@return boolean 是否开启
function sys.is_assistive_touch_on() end

--- 开启 Assistive Touch
function sys.assistive_touch_on() end

--- 关闭 Assistive Touch
function sys.assistive_touch_off() end

--- 获取减弱动态效果开关状态
---@return boolean 是否开启
function sys.is_reduce_motion_on() end

--- 开启减弱动态效果
function sys.reduce_motion_on() end

--- 关闭减弱动态效果
function sys.reduce_motion_off() end

--- 获取定位服务开关状态
---@return boolean 是否开启
function sys.is_location_services_on() end

--- 开启定位服务
function sys.location_services_on() end

--- 关闭定位服务
function sys.location_services_off() end

--- 获取是否允许 App 追踪
---@return boolean 是否开启
function sys.is_tracking_on() end

--- 允许 App 追踪
function sys.tracking_on() end

--- 不允许 App 追踪
function sys.tracking_off() end

--- 获取后台 App 刷新状态
---@return integer 状态
function sys.background_app_refresh_state() end

--- 设置后台 App 刷新状态
---@param state integer 状态
function sys.set_background_app_refresh_state(state) end

--- 还原
---@param resetName string 还原类型名称
function sys.reset(resetName) end


--------------------------------------------------------------------------------
-- 线程模块
--------------------------------------------------------------------------------

---@class thread*
thread = {}

--- 派发一个任务
---@param taskClousure function 任务函数
---@param errorCallback? function 错误回调
---@return integer 任务ID
function thread.dispatch(taskClousure, errorCallback) end

--- 获取当前任务的 ID
---@return integer 任务ID
function thread.current_id() end

--- 从队列中移除一项任务
---@param taskID integer 任务ID
function thread.kill(taskID) end

--- 阻塞等待一个任务完成
---@param taskID integer 任务ID
---@param timeout? integer 超时秒
function thread.wait(taskID, timeout) end

--- 注册监听一个事件
---@param eventName string 事件名称
---@param eventCallback function 事件回调
---@param errorCallback? function 错误回调
---@return integer 事件监听ID
function thread.register_event(eventName, eventCallback, errorCallback) end

--- 反注册监听一个事件
---@param eventName string 事件名称
---@param eventID integer 事件监听ID
---@return integer 事件监听ID
function thread.unregister_event(eventName, eventID) end


--------------------------------------------------------------------------------
-- 模拟触摸模块
--------------------------------------------------------------------------------

---@class touch*
touch = {}

---@class Touch*
Touch = {}

--- 设置触摸事件可视化显示
---@param shouldShow boolean 是否显示
function touch.show_pose(shouldShow) end

--- 模拟手指轻触一次屏幕
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@param delayBetweenDownAndUpInMs? integer 延迟毫秒
---@param delayAfterUpInMs? integer 操作后等待毫秒
function touch.tap(coordX, coordY, delayBetweenDownAndUpInMs, delayAfterUpInMs) end

--- 模拟手指接触屏幕
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@return Touch* 触摸事件
function touch.on(coordX, coordY) end

--- 模拟手指离开屏幕
---@param coordX? integer 横坐标
---@param coordY? integer 纵坐标
function Touch:off(coordX, coordY) end

--- 模拟手指在屏幕上移动
---@param coordX integer 横坐标
---@param coordY integer 纵坐标
---@param pressure? integer 压力
---@param twist? integer 角度
---@param flags? integer 选项标识位
---@return Touch* 触摸事件
function Touch:move(coordX, coordY, pressure, twist, flags) end

--- 设置触摸事件对象移动每步延迟
---@param stepDelay integer 每步延迟
---@return Touch* 触摸事件
function Touch:step_delay(stepDelay) end

--- 设置触摸事件对象移动步长
---@param stepLength integer 步长
---@return Touch* 触摸事件
function Touch:step_len(stepLength) end

--- 毫秒级延迟
---@param delayInMs integer 毫秒数
---@return Touch* 触摸事件
function Touch:msleep(delayInMs) end

--- 模拟手指在屏幕上施加压力
---@param pressure? integer 压力
---@param twist? integer 角度
---@return Touch* 触摸事件
function Touch:press(pressure, twist) end


--------------------------------------------------------------------------------
-- 小工具模块
--------------------------------------------------------------------------------

---@class utils*
utils = {}

--- 给通讯录添加一个或多个联系人
---@param contacts table 联系人列表
---{
---  {
---    firstName = "姓1",
---    lastName = "名1",
---    phoneNumbers = {
---      "联系人1号码1",
---      "联系人1号码2",
---    },
---    emails = {
---      "联系人1邮箱1",
---      "联系人1邮箱2",
---    },
---  },
---  {
---    firstName = "姓2",
---    lastName = "名2",
---    phoneNumbers = {
---      "联系人2号码1",
---      "联系人2号码2",
---    },
---    emails = {
---      "联系人2邮箱1",
---      "联系人2邮箱2",
---    },
---  },
---  ...
---}
---@return boolean 操作成败
function utils.add_contacts(contacts) end

--- 删除通讯录所有联系人
---@return boolean 操作成败
function utils.remove_all_contacts() end

--- 获得当前脚本的启动参数
---@return table 启动参数关联表
function utils.launch_args() end

--- 判断当前脚本是否从 App 内启动
---@return boolean 是否从App内启动
function utils.is_launch_via_app() end


--------------------------------------------------------------------------------
-- VPN 配置模块
--------------------------------------------------------------------------------

---@class vpnconf*
vpnconf = {}

--- 创建一个 VPN 配置
---@param configTab table 配置表
---@return boolean 创建成败
function vpnconf.create(configTab) end

--- 获取当前系统 VPN 的列表
---@return table VPN列表
function vpnconf.list() end

--- 选择一个 VPN 配置
---@param displayID string 显示名或VPNID
---@return boolean 操作成败
function vpnconf.select(displayID) end

--- 删除一个 VPN 配置
---@param displayID string 显示名或VPNID
---@return boolean 操作成败
function vpnconf.delete(displayID) end

--- 清空所有 VPN 配置
---@return boolean 操作成败
function vpnconf.clear() end

--- 以当前选择的 VPN 建立连接
---@return boolean 操作成败
function vpnconf.connect() end

--- 断开当前的 VPN 连接
---@return boolean 操作成败
function vpnconf.disconnect() end

--- 获取当前选择的 VPN 的状态
---@return table 状态描述表
function vpnconf.status() end


--------------------------------------------------------------------------------
-- Web 视图模块
--------------------------------------------------------------------------------

---@class webview*
webview = {}

--- 展现一个 Web 视图
---@param opts table 选项表 {id = 视图ID, html = HTML内容, x = 原点横坐标, y = 原点纵坐标, width = 宽度, height = 高度, corner_radius = 圆角半径, alpha = 不透明度, animation_duration = 动画时间, rotate = 旋转角度, level = 窗体层级, opaque = 范围不透明, ignores_hit = 是否忽略触摸事件, can_drag = 是否能被拖动}
function webview.show(opts) end

--- 隐藏一个 Web 视图
---@param viewID string 视图ID
function webview.hide(viewID) end

--- 在一个 Web 视图上执行一段 JavaScript
---@param jsContent string JS文本
---@param viewID string 视图ID
---@return string 执行结果文本
function webview.eval(jsContent, viewID) end

--- 获取一个 Web 视图的区域及层级信息
---@param viewID string 视图ID
---@return table? 区域及层级信息表
function webview.frame(viewID) end

--- 销毁一个 Web 视图
---@param viewID string 视图ID
function webview.destroy(viewID) end

